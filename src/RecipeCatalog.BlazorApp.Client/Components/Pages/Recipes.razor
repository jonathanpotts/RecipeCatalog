@page "/Recipes"
@implements IDisposable
@inject ICuisineService CuisineService
@inject IRecipeService RecipeService
@inject NavigationManager NavigationManager
@inject PersistentComponentState ApplicationState
@rendermode InteractiveAuto

<PageTitle>Recipes</PageTitle>

<div class="d-flex flex-wrap justify-content-between column-gap-3">
    <h1>Recipes</h1>
    <div>
        <AuthorizeView>
            <div class="mb-2">
                <a class="btn btn-primary" href="Recipes/Add">
                    <i class="bi bi-plus-circle" aria-hidden="true"></i> Add
                </a>
            </div>
        </AuthorizeView>
    </div>
</div>

@if (_recipes == null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    @if (_cuisines?.Any() ?? false)
    {
        <div class="card mb-4">
            <div class="card-header">Cuisines</div>
            <div class="card-body">
                @foreach (var cuisine in _cuisines)
                {
                    <div class="form-check form-check-inline">
                        <input type="checkbox"
                               class="form-check-input"
                               id=@($"cuisine_{cuisine.Id}")
                               checked="@(_cuisineFilter?.Contains(cuisine.Id) ?? false)"
                               @onchange="e => CuisineFilterChanged(cuisine.Id, e.Value)" />
                        <label class="form-check-label"
                               for=@($"cuisine_{cuisine.Id}")>
                            @cuisine.Name
                        </label>
                    </div>
                }
            </div>
        </div>
    }

    @if (_recipes.Total > 0)
    {
        <div class="row row-cols-1 row-cols-lg-2 row-cols-xl-3 row-cols-xxl-4 g-3 mb-4">
            @foreach (var recipe in _recipes.Items)
            {
                <div class="col">
                    <RecipeCard Recipe="recipe" />
                </div>
            }
        </div>
    }
    else
    {
        <p class="mb-4">There are currently no recipes.</p>
    }

    @if (_totalPages > 0)
    {
        <nav aria-label="Page navigation" class="mb-4">
            <ul class="pagination justify-content-center">
                <li class=@(Page is null or 1 ? "page-item disabled" : "page-item")>
                    <a class="page-link"
                             href=@(Page is null or 1 ? null : GetPageUri(Page - 1))>
                        <i class="bi bi-chevron-left" aria-label="Previous"></i>
                    </a>
                </li>
                @foreach (var page in GetPagination())
                {
                    if (page > 0)
                    {
                        <li
                            class=@(((Page is null or 1 && page is 1) || Page == page) ? "page-item active" : "page-item")>
                            <a class="page-link" href="@GetPageUri(page)">
                                @(page)
                            </a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item">
                            <span class="page-link disabled">...</span>
                        </li>
                    }
                }
                <li class=@((_totalPages == 1 || Page == _totalPages) ? "page-item disabled" : "page-item")>
                    <a class="page-link"
                             href=@((_totalPages == 1 || Page == _totalPages) ? null : GetPageUri((Page ?? 1) + 1))>
                        <i class="bi bi-chevron-right" aria-label="Next"></i>
                    </a>
                </li>
            </ul>
        </nav>
    }
}

@code {
    private const int PageSize = 20;
    private const int PaginatorSize = 7;

    [Parameter]
    [SupplyParameterFromQuery]
    public int? Page { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int[]? CuisineIds { get; set; }

    private IEnumerable<CuisineDto>? _cuisines = null;
    private PagedResult<RecipeWithCuisineDto>? _recipes = null;

    private HashSet<int>? _cuisineFilter;
    private int _totalPages;

    private PersistingComponentStateSubscription persistingSubscription;

    protected override void OnInitialized()
    {
        persistingSubscription =
            ApplicationState.RegisterOnPersisting(PersistData);
    }

    protected override async Task OnParametersSetAsync()
    {
        _cuisineFilter = [.. CuisineIds ?? []];

        if (!ApplicationState.TryTakeFromJson<IEnumerable<CuisineDto>>(
            "cuisines", out var restoredCuisines))
        {
            _cuisines = (await CuisineService.GetListAsync()).OrderBy(x => x.Name);
        }
        else
        {
            _cuisines = restoredCuisines;
        }

        if (!ApplicationState.TryTakeFromJson<PagedResult<RecipeWithCuisineDto>>(
            "recipes", out var restoredRecipes))
        {
            var skip = Page != null ? (Page - 1) * PageSize : null;
            _recipes = await RecipeService.GetListAsync(skip, PageSize, _cuisineFilter?.ToArray());
        }
        else
        {
            _recipes = restoredRecipes;
        }

        _totalPages = _recipes!.Total % PageSize > 0
            ? (_recipes.Total / PageSize) + 1
            : _recipes.Total / PageSize;
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson("cuisines", _cuisines);
        ApplicationState.PersistAsJson("recipes", _recipes);

        return Task.CompletedTask;
    }

    private string GetPageUri(int? page)
    {
        return NavigationManager.GetUriWithQueryParameters(new Dictionary<string, object?>()
        {
            { nameof(CuisineIds), _cuisineFilter?.ToArray() },
            { nameof(Page), page }
        });
    }

    private void CuisineFilterChanged(int id, object? value)
    {
        _cuisineFilter ??= [];

        if (value is true)
        {
            _cuisineFilter.Add(id);
        }
        else
        {
            _cuisineFilter.Remove(id);
        }

        NavigationManager.NavigateTo(GetPageUri(1));
    }

    private IEnumerable<int> GetPagination()
    {
        if (_totalPages <= PaginatorSize)
        {
            return Enumerable.Range(1, _totalPages);
        }

        List<int> pages = [];

        var half = PaginatorSize / 2;

        if ((Page ?? 1) <= half + 1)
        {
            pages.AddRange(Enumerable.Range(1, PaginatorSize - 2));
            pages.Add(-1);
            pages.Add(_totalPages);
        }
        else if ((Page ?? 1) >= _totalPages - half)
        {
            pages.Add(1);
            pages.Add(-1);
            pages.AddRange(Enumerable.Range(_totalPages - PaginatorSize + 3, PaginatorSize - 2));
        }
        else
        {
            pages.Add(1);
            pages.Add(-1);
            pages.AddRange(Enumerable.Range((Page ?? 1) - half + 2, PaginatorSize - 4));
            pages.Add(-1);
            pages.Add(_totalPages);
        }

        return pages;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }
}
